# This workflow sets up a complete CI/CD pipeline for a Python application,
# including linting, unit testing, and security analysis using Bandit and CodeQL.

name: Python CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  # Allow manual trigger from the GitHub Actions UI
  workflow_dispatch:

permissions:
  contents: read # Required to checkout the code
  security-events: write # Required for CodeQL to upload analysis results

jobs:
  build_and_test:
    name: Build, Test, and Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip" # Cache dependencies for faster builds

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install testing and linting tools, plus Bandit for security
          pip install flake8 pytest bandit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with Flake8
        run: |
          # Stop build on syntax errors or undefined names (E9, F)
          # CRITICAL CHANGE: Added --exclude=tests/ to ignore test files from strict linting
          flake8 . --count --select=E9,F63,F7,F82 --exclude=tests/ --show-source --statistics
          # Check general style, exiting with 0 status so it doesn't break the build
          # CRITICAL CHANGE: Added --exclude=tests/ to ignore test files from style checks
          flake8 . --count --exit-zero --exclude=tests/ --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Unit Tests with Pytest
        run: |
          # This step should now succeed, provided tests/__init__.py exists
          pytest --junitxml=reports/pytest.xml # Output report for potential artifact storage

      - name: Security Scan with Bandit
        # Bandit checks for common security issues in Python code
        run: |
          # CRITICAL CHANGE: Added -x ./tests/ to explicitly exclude the test directory from security scanning
          bandit -r . -x ./tests/

  security_analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    needs: build_and_test # Only run security analysis if tests and linting pass

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Initializes the CodeQL toolchain and creates a CodeQL database.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      # Autobuild attempts to automatically build your code, which is usually
      # successful for Python projects unless a special build command is needed.
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      # Performs the actual analysis and uploads the results to GitHub Security tab
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
